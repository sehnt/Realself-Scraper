import visit
import requests
import get_links
from pathlib import Path
from review import Review
import get_driver
from selenium.webdriver import ActionChains
import time
import count_words

BASE_PATH = Path.cwd()

# This is the name of the procedure being
# scraped used in realself.com's links
PROCEDURE = "breast-reconstruction"


# Uncomment sections as needed. You probably
# only want one uncommented at a time
if __name__ == "__main__":
    
    # Downloads the webpages containing
    # the links for each review and parses
    # out the review links.
    # grab_links(url, delay, num_pages, PROCEDURE)
    # delay is minimum seconds between each set of requests
    # grab_links will visit links [0, num_pages]
##    url = "https://www.realself.com/reviews/" + PROCEDURE + "?sort=3&page="
##    get_links.grab_links(url, 1695, PROCEDURE)


    # Visits every link in BASE_PATH/PROCEDURE/links.txt and downloads
    # the review page's HTML.
    # visit_links(procedure, thread_count)
    # thread_count is the number of selenium windows to open at a time
##    visit.visit_links(PROCEDURE, 7)


    # Parses the downloaded html .txt file for every link
    # in links.txt. It goes until it reaches a webpage that didn't
    # get downloaded and throws an exception because
    # the .txt file doesn't exist.
##    visit.parse_reviews(PROCEDURE, 1)

    # Counts the occurences of every word found in the reviews for a
    # given procedure. Generates a file containing a dict with this info.
    # Also generates a CSV file containing every review and all of its text
    # The second parameter, currently '::?::', is the separator
    # to use for the CSV file
##    count_words.count_words(PROCEDURE, '::?::')

    # Uses the dictionary file generated by count_words to generate
    # a CSV sorting words by "Worth It" ratings
##    count_words.words_to_csv(PROCEDURE, '::?::')
    

